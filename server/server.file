import fastifyEnv from "@fastify/env";
import Fastify, { FastifyReply, FastifyRequest } from "fastify";
import fastifyRedis from "@fastify/redis";
import cluster from "node:cluster";

import {
  getAdminRoleIdEnv,
  getDatabaseSchemaEnv,
  getServerIPAddressEnv,
  getServerPortEnv,
  options,
} from "./utils/dotenv.js";
import { drizzleInstance, migrateToDb } from "./utils/drizzle.js";
import { BaseRepository } from "./repositories/base.repository.js";
import { User, userTable } from "./models/user.model.js";
import { roleTable } from "./models/role.model.js";
import { specialityTable } from "./models/speciality.model.js";
import { userRolesMappingsTable } from "./models/userRolesMappings.model.js";
import { doctorSpecialitiesMappingsTable } from "./models/doctorSpecialitiesMappings.js";
import fastifyCors from "@fastify/cors";
import { channel } from "node:diagnostics_channel";

const redisChannel = "sseChannel";

declare module "fastify" {
  interface FastifyInstance {
    config: {
      SERVER_PORT: number;
      SERVER_IP_ADDRESS: string;
      UUID_V5_NAMESPACE: string;
      DATABASE_HOST: string;
      DATABASE_PORT: number;
      DATABASE_USERNAME: string;
      DATABASE_PASSWORD: string;
      DATABASE_NAME: string;
      DATABASE_SCHEMA: string;
      REACT_CLIENT_PORT: number;
      REACT_CLIENT_IP_ADDRESS: string;
      ADMIN_ROLE_ID: string;
      DOCTOR_ROLE_ID: string;
      RECEPTIONIST_ROLE_ID: string;
      PATIENT_ROLE_ID: string;
    };
  }
}

export const fastifyServer = Fastify({
  // logger: true,
});

fastifyServer.get("/non-blocking", async (request, reply) => {
  // const { redis } = fastifyServer;
  const userRepo = new BaseRepository(drizzleInstance, userTable);
  // await redis.set("mykey2024get", JSON.stringify(request));

  const workerID = cluster.worker
    ? cluster.worker.id
    : "Not in cluster environment";

  const { redis } = fastifyServer;

  // const requestData = JSON.stringify(request.raw);
  console.log(request);

  await redis.main.set("mykey2024get", "requestData");

  console.log(`Request handled by worker #${workerID}`);
  return {
    hello: "world fastify",
    // redis: await redis.get("mykey2024get"),
    testUser: await userRepo.getById("48631bef-8a77-51ca-b719-dfe17b719081"),
    // requestData,
  };
});

fastifyServer.get("/blocking", async (request, reply) => {
  const { redis } = fastifyServer;
  // await redis.set("mykey2024get", JSON.stringify(request));
  let counter = 0;
  for (let i = 0; i < 2_000_000_000; i++) {
    counter = counter + 1;
  }

  const workerID = cluster.worker
    ? cluster.worker.id
    : "Not in cluster environment";

  console.log(`Request handled by worker #${workerID}`);

  return { counter };
});

const corsOptions = {
  origin: "*",
};

// SSE
let clients: any[] = [];
import safeStringify from "safe-stringify";

async function sendEventToClients(eventData: string) {
  clients.forEach((client) => {
    client.response.raw.write(`data: ${eventData}\n\n`);
  });

  const { redis } = fastifyServer;

  // console.log(await redis.main.keys("connected_clients:*"));

  // const keys = await redis.main.keys("connected_clients:*");

  // for (let i = 0; i < keys.length; i++) {
  //   // console.log("key:" + keys[i]);
  //   // console.log(await redis.main.get(keys[i]));
  //   let client = await redis.main.get(keys[i]);
  //   if (client !== null) {
  //     let jsonClient:FastifyReply = JSON.parse(client);

  //     jsonClient!.response.raw.write(`data: ${eventData}\n\n`);
  //   }
  // }
}

function eventsHandler(req: FastifyRequest, reply: FastifyReply) {
  const headers = {
    "Content-Type": "text/event-stream",
    Connection: "keep-alive",
    "Cache-Control": "no-cache",
    "Access-Control-Allow-Origin": `http://192.168.2.16:3000`,
    "Access-Control-Expose-Headers": "*",
  };

  reply.raw.writeHead(200, headers);

  const clientId = req.id;

  const newClient = {
    id: clientId,
    response: reply,
  };

  clients.push(newClient);

  const { redis } = fastifyServer;

  redis.main.set(`connected_clients:${clientId}`, safeStringify(reply));

  // console.log(reply);

  // const workerID = cluster.worker
  //   ? cluster.worker.id
  //   : "Not in cluster environment";

  // let messageToSend;
  // redis.subscriber.on("message", (channel, message) => {
  //   messageToSend = message;
  //   console.log(
  //     `[server#${cluster.worker?.id}]: Received message from ${channel}: ${message}`
  //   );
  // });

  req.raw.on("close", () => {
    console.log(`${clientId} connection closed`);
    clients = clients.filter((client) => client.id !== clientId);
  });
}

fastifyServer.get("/sse", eventsHandler);

fastifyServer.post("/notify-clients", (req, reply) => {
  const eventData = JSON.stringify({
    type: "other",
    notification: "Button clicked! here",
  });
  sendEventToClients(eventData);
  reply.send("Notification sent to clients");
});

let counter = 0;

fastifyServer.post("/counter", (req, reply) => {
  const workerID = cluster.worker
    ? cluster.worker.id
    : "Not in cluster environment";

  console.log(`Request handled by worker #${workerID}`);

  const { redis } = fastifyServer;

  counter = counter + 1;

  const eventData = JSON.stringify({ type: "counter", counter });

  redis.publisher.publish(redisChannel, eventData, (err, reply) => {
    if (err) {
      console.error("Error publishing message:", err);
      return;
    }
    console.log(`Message published to ${redisChannel}: ${eventData}`);
  });

  // redis.subscribe(testChannel);

  let messageToSend;
  redis.subscriber.on("message", (channel, message) => {
    messageToSend = message;
    console.log(`Received message from ${channel}: ${message}`);
  });

  sendEventToClients(eventData);

  reply.code(200).send({ counter });
});
// /SSE

const startServer = async () => {
  // try {
  //   fastifyServer.register(fastifyCors, corsOptions);
  //   fastifyServer.register(fastifyEnv, options);
  //   fastifyServer.register(fastifyRedis, {
  //     host: "127.0.0.1",
  //     // password: "your strong password here",
  //     port: 6379,
  //     family: 4,
  //   });
  //   await fastifyServer;

  //   await migrateToDb();

  //   const fastifyServerIPAddress = getServerIPAddressEnv();
  //   const fastifyServerPort = getServerPortEnv();

  //   await fastifyServer.listen({
  //     port: fastifyServerPort,
  //     host: fastifyServerIPAddress,
  //   });
  // } catch (error) {
  //   console.log(error);
  // }

  // console.log("I am worker #" + cluster.worker?.id);
  fastifyServer.register(fastifyCors, corsOptions);
  fastifyServer.register(fastifyEnv, options);
  fastifyServer
    .register(fastifyRedis, {
      host: "127.0.0.1",
      // password: "your strong password here",
      port: 6379,
      family: 4,
      namespace: "main",
    })
    .register(fastifyRedis, {
      host: "127.0.0.1",
      // password: "your strong password here",
      port: 6379,
      family: 4,
      namespace: "publisher",
    })
    .register(fastifyRedis, {
      host: "127.0.0.1",
      // password: "your strong password here",
      port: 6379,
      family: 4,
      namespace: "subscriber",
    });
  await fastifyServer;

  await migrateToDb();

  const { redis } = fastifyServer;

  // redis.publisher.publish(
  //   "sseChannel",
  //   "this is a global message",
  //   (err, reply) => {
  //     if (err) {
  //       console.error("Error publishing message:", err);
  //       return;
  //     }
  //   }
  // );

  redis.subscriber.subscribe(redisChannel, (err) => {
    if (err) {
      console.error("Error subscribing to channel:", err);
      return;
    }
    console.log(`Subscribed to ${redisChannel} (server#${cluster.worker?.id})`);
  });

  // redis.subscriber.on("message", (channel, message) => {
  //   console.log(`Received message from ${channel}: ${message}`);
  // });

  let messageToSend;
  redis.subscriber.on("message", (channel, message) => {
    messageToSend = message;
    console.log(
      `[server#${cluster.worker?.id}]: Received message from ${channel}: ${message}`
    );
  });

  const fastifyServerIPAddress = getServerIPAddressEnv();
  const fastifyServerPort = getServerPortEnv();

  await fastifyServer.listen({
    port: fastifyServerPort,
    host: fastifyServerIPAddress,
  });
};

startServer();

// const numClusterWorkers = 3;
// if (cluster.isPrimary) {
//   console.log(`Primary ${process.pid} is running`);
//   for (let i = 0; i < numClusterWorkers; i++) {
//     cluster.fork();
//   }

//   cluster.on("exit", (worker, code, signal) =>
//     console.log(`worker ${worker.process.pid} died`)
//   );

//   cluster.on("online", (worker) => {
//     // console.log("Yay, the worker responded after it was forked");
//   });
// } else {
//   try {
//     startServer();
//   } catch (error) {
//     console.log(error);
//   }
// }
